<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="ChangeRequest.Code.SaveButtonsUIX" locale="">
  <web>ChangeRequest.Code</web>
  <name>SaveButtonsUIX</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>SaveButtonsUIX</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
#if ($request.get('checktemplate') == 1)
  #set ($isTemplateSupported = $services.changerequest.isTemplateSupported($request.get('template')))
  #jsonResponse({
    'isSupported': $isTemplateSupported
  })
#end
{{/velocity}}</content>
  <object>
    <name>ChangeRequest.Code.SaveButtonsUIX</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>35af08ef-adff-45fa-9b7a-4462347574e4</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery', 'xwiki-meta', 'SaveChangeRequestModal'], function ($, xm, SaveChangeRequestModal) {
  var saveConfig = JSON.parse($('#changerequest-save-config').text());
  
  var handleCancel = function (event) {
    event.preventDefault();
    $(document).trigger('xwiki:actions:cancel');
    var urlParams = new URLSearchParams(window.location.search);
    var editExistingCR = urlParams.has('changerequest');
    if (editExistingCR) {
      document.location.href = saveConfig.changeRequestURL;
    } else {
      currentDocUrl = new XWiki.Document(xm.documentReference).getURL();
      document.location.href = currentDocUrl;
    }
  };
  
  var attachButtons = function () {
    if ($('#save_changerequest').length == 0) {
      var button = $("&lt;input&gt;", {
        'type': 'button',
        'class': 'btn btn-info',
        'name': 'save_changerequest',
        'id': 'save_changerequest',
        'value': saveConfig.saveButtonTranslation
      });
      
      var buttonAdded = false;
      var inplaceEditing;
      if ($('.bottombuttons').length &gt; 0) {
        $('.bottombuttons .buttons').prepend(button);
        buttonAdded = true;
        inplaceEditing = false;
      } else if ($('.inplace-editing-buttons').length &gt; 0) {
        button.data('inplaceediting', true);
        $('.inplace-editing-buttons .buttons').prepend(button);
        buttonAdded = true;
        inplaceEditing = true;
      }
    }
    if (buttonAdded) {
      var saveChangeRequestModal = new SaveChangeRequestModal('changerequest-save-config');
      var urlParams = new URLSearchParams(window.location.search);
      var editExistingCR = urlParams.get('changerequest');
      button.on('click', function(event) {
        if (editExistingCR) {
          saveChangeRequestModal.saveChangeRequest(event, editExistingCR);
        } else {
          saveChangeRequestModal.openModal();
        }
      });
      $(document).on('xwiki:document:saveFailed', function(event, data) {
        var errorMessage = data.response.responseJSON.changeRequestError;
        if (errorMessage) {
          saveChangeRequestModal.openModal();
          $(document).on('xwiki:dom:updated', function (event, data) {
            if (data.elements.length &gt; 0 &amp;&amp; $(data.elements)[0].id === 'changeRequestModal') {
              $('#otherError').removeClass('hidden');
              $('#otherError').find('.details').text(errorMessage);
            }
          });
        }
      });
      
      var hasEditRight = saveConfig.hasEditRight;
      // hide minor edit and autosave capabilities
      if (!hasEditRight || editExistingCR) {
        $('.meta-minorEdit').remove();
        $('#autosaveControl').remove();
        $('input[name=action_save]').parent().remove();
        $('input[name=action_cancel]').off('click');
        $('input[name=action_cancel]').on('click', handleCancel);
      }
    }
  };
  
  var initialize = function() {
    var urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('template')) {
      var saveButtonUIXDoc = new XWiki.Document(new XWiki.DocumentReference('xwiki', ['ChangeRequest', 'Code'], 'SaveButtonsUIX'));
      // check template
      $.get(saveButtonUIXDoc.getURL('get'), {
        'checktemplate': 1,
        'outputSyntax': 'plain',
        'template': urlParams.get('template')
      }).done(function (data) {
        if (data.isSupported === true) {
          attachButtons();
        } else {
          console.info("Template [{}] not supported by change request.", urlParams.get('template'));
        }
      }).fail(function (data) {
        console.error("Error when checking if template [{}] is supported by change request.", urlParams.get('template'));
        console.debug(data);
      });
    } else {
      attachButtons();
    }
  }

  $(document).on('xwiki:dom:updated', initialize);
  initialize();
});</code>
    </property>
    <property>
      <name>SaveButtonsUIX</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>ChangeRequest.Code.SaveButtonsUIX</name>
    <number>0</number>
    <className>XWiki.UIExtensionClass</className>
    <guid>76f49e6a-8dc3-42ca-97a8-2c3ef834a7fa</guid>
    <class>
      <name>XWiki.UIExtensionClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <async_cached>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>async_cached</name>
        <number>3</number>
        <prettyName>Cached</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_cached>
      <async_context>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>1</multiSelect>
        <name>async_context</name>
        <number>4</number>
        <prettyName>Context elements</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>, </separator>
        <separators>|, </separators>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <values>action=Action|doc.reference=Document|icon.theme=Icon theme|locale=Language|rendering.defaultsyntax=Default syntax|rendering.restricted=Restricted|rendering.targetsyntax=Target syntax|request.base=Request base URL|request.cookies|request.parameters=Request parameters|request.url=Request URL|request.wiki=Request wiki|user=User|wiki=Wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </async_context>
      <async_enabled>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>async_enabled</name>
        <number>2</number>
        <prettyName>Asynchronous rendering</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_enabled>
      <content>
        <disabled>0</disabled>
        <editor>Text</editor>
        <name>content</name>
        <number>1</number>
        <prettyName>Executed Content</prettyName>
        <rows>25</rows>
        <size>120</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <extensionPointId>
        <disabled>0</disabled>
        <name>extensionPointId</name>
        <number>5</number>
        <prettyName>Extension Point ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </extensionPointId>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>6</number>
        <prettyName>Extension ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parameters>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>parameters</name>
        <number>7</number>
        <prettyName>Extension Parameters</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </parameters>
      <scope>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>scope</name>
        <number>8</number>
        <prettyName>Extension Scope</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>wiki=Current Wiki|user=Current User|global=Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </scope>
    </class>
    <property>
      <async_cached>0</async_cached>
    </property>
    <property>
      <async_context/>
    </property>
    <property>
      <async_enabled>0</async_enabled>
    </property>
    <property>
      <content>{{velocity}}
#set ($crEditName = "changerequest")
#set ($hasCREdit = $services.changerequest.authorization.isEditWithChangeRequestAllowed($doc.getDocumentReference()))
## we need to also inject this in view action, because of the inplace editing mode.
#set ($isEditOrViewAction = ($xcontext.action == 'edit' || $xcontext.action == 'view'))
#if ($hasCREdit &amp;&amp; $isEditOrViewAction)
  #set ($hasEditRight = $services.security.authorization.hasAccess('edit', $doc))
  #set ($createURL = $services.changerequest.getChangeRequestURL('create', ''))
  #set ($addChangesURL = $services.changerequest.getChangeRequestURL('addchanges', '__CR__'))
  #set ($isInplaceEditing = ($xcontext.action == 'view'))
  #set ($changeRequestSaveConfig = {
    'hasEditRight': $hasEditRight,
    'createURL': $createURL,
    'addChangesURL': $addChangesURL,
    'saveButtonTranslation': $services.localization.render('changerequest.editor.button.save'),
    'isCreation': $doc.isNew(),
    'isInplaceEditing': $isInplaceEditing
  })
  #if ($request.get('changerequest'))
    #set ($changeRequestOpt = $services.changerequest.getChangeRequest($request.get('changerequest')))
    #if ($changeRequestOpt.isPresent())
      #set ($changeRequestDocReference = $services.changerequest.getChangeRequestDocumentReference($changeRequestOpt.get()))
      #set ($discard = $changeRequestSaveConfig.put('changeRequestURL', $xwiki.getDocument($changeRequestDocReference).getURL()))
    #end
  #end
  
  {{html clean="false"}}
  &lt;script id="changerequest-save-config" type="application/json"&gt;$jsontool.serialize($changeRequestSaveConfig).replace('&lt;', '\u003C')&lt;/script&gt;
  #set ($discard = $xwiki.linkx.use($services.webjars.url('selectize.js', 'css/selectize.bootstrap3.css'),
  {'type': 'text/css', 'rel': 'stylesheet'}))
  #set ($discard = $xwiki.ssfx.use('uicomponents/suggest/xwiki.selectize.css', true))
  #set ($discard = $xwiki.jsfx.use('uicomponents/suggest/xwiki.selectize.js', true))
  #set ($discard = $xwiki.jsx.use('ChangeRequest.Code.SaveChangeRequestModal'))
  #set ($discard = $xwiki.jsx.use('ChangeRequest.Code.SaveButtonsUIX'))
  {{/html}}
  
#end
{{/velocity}}</content>
    </property>
    <property>
      <extensionPointId>org.xwiki.platform.template.header.after</extensionPointId>
    </property>
    <property>
      <name>org.xwiki.contrib.changerequest.ui.header.after.editor.extension</name>
    </property>
    <property>
      <parameters>order=0</parameters>
    </property>
    <property>
      <scope>wiki</scope>
    </property>
  </object>
</xwikidoc>
